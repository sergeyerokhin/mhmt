Хрум может иметь заголовок: в нём 5 последних байт выхода, т.е. их не надо писать в упакованный поток.
Хруст - аналогично, 6 последних байт.
Везде 1ый байт входа никак не пакуется, пихается в начало потока.


Различие сохранения бит в потоке для мегалза и хрумохруста:

1. мегалз - по 8 бит, хрумст - по 16 (тривиально)

2. мегалз: если в буферном байте 0 бит и нужен новый - взять из потока новый, взять бит из буферного байта
   хрумст: если в буферном слове 1 бит и нужен новый - взять этот бит, затем взять из потока новое слово

   различие с другой стороны.
   мегалз: нужно бит; если битов нету, взять байт, из него бит
   хрумст: нужно бит; взять из слова, если теперь битов нету, взять слово с новыми битами.

3. начало файла: различие в порядке первого байта и байта/слова битпотока (тривиально)




Обобщённые типы ссылок

Копирование: 1 байт (все), 12,14,16,..,42 байта (хрум,хруст)

Спецссылки со вставкой байта: байт по ссылке, байт из потока, байт по ссылке+2, смещение - -1..-79 (хруст)

Ссылка 1 байт, смещения -1..-8 (все)

Ссылка 2 байта, смещения: -1..-256 (мегалз, хрум)
                          -1..-768 (хруст)

Ccылки длиной 3-255, смещением -1..-4352  (мегалз)
              3-255,           -1..-4096  (хрум)
              3-3839,          -1..-65536 (хруст)

special cases: расширение ссылки для хруста (надо вставлять в поток по мере необходимости,
               как-то учитывать при расчёте цены ссылок при оптимальном кодировании).



Замечания по реализации:

1. twobyters остаются для всего, меняется макс. смещение назад, которое сохраняется в очередях (4352, 4096, 65536)

2. байтовый хеш тоже остаётся, для быстрой проверки концов строк на возможное совпадение.

3. 1-байтовые ссылки ищутся прямым перебором (всего 8 вариантов).

4. как искать вставные ссылки в хрусте?
   Вариант - прямой перебор (всего 79 вариантов).
   Отдельный случай для вставных ссылок со смещением -1 (байт3=байт2=вставной байт),
   со смещением -2 (байт3=байт1)


5. Максимально возможное кол-во ссылок и копирований в статическом массиве (единственный, строится на каждый байт заново):

   1 + 16 = 17 копирований (1 байт, 12,14,16,..,42 байта)

   одна вставная ссылка

   ссылки длиной 1-3839 байт: всего 3839 вариантов

   Итого 3857 вариантов


6. для каждого байта ищутся ВСЕ возможные ссылки и копирования, затем проводится шаг оптимального кодирования для этого байта (1 стадия).

   После того, как все байты обработаны, просмотром с конца строится оптимальная цепочка кодов и выводится в выходной поток (2 стадия).


Как учесть расширение ссылок в 1ой стадии оптимального кодирования?

После каждого расширения, цены многих ссылок (длиной 3 и более байт, смещением далее -512) меняются
(становятся больше на 1 бит после каждого расширения).

Вариант: статическое местоположение расширений: через 1024 байта от начала, через 2048, и т.д., нет проблем с моментом, когда
         надо поменять цену ссылок. При кодировании можно не вставлять расширения до тех пор, пока внатуре не встретится
         достаточно длинная ссылка (экономим несколько бит на предыдущих расширяемых ссылках). Но по определению,
         цепочка на стадии 1 получается неоптимальной.



Архитектура программы:

общая функция укаковки (инициализация, просмотр всех байтов, вызов искателя ссылок, оптимальное кодирование, вызов генератора выхода) - одна

Разные функции: искатель ссылок, выдача инфы по ссылке, генератор выхода.

